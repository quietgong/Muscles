<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kinaboot.muscles.dao.orderMapper">
    <select id="count" resultType="int">
        SELECT count(*)
        FROM orders
    </select>
    <!-- 전체 주문목록 반환 -->
    <select id="selectOrderAllList" parameterType="SearchCondition" resultType="orderDto">
        select orderNo, userId, status, createdDate
        from orders
        <include refid="dateCondition"/>
    </select>
    <sql id="dateCondition">
        <choose>
            <when test='startDate == null and endDate == null'>
                where 1=1
            </when>
            <when test='startDate==null'>
                <![CDATA[where createdDate <= date(#{endDate})+1]]>
            </when>
            <when test='endDate==null'>
                <![CDATA[where createdDate >= date(#{startDate})]]>
            </when>
            <otherwise>
                where createdDate between date(#{startDate}) and date(#{endDate})+1
            </otherwise>
        </choose>
    </sql>
    <!-- userId로 주문정보 목록 반환 -->
    <select id="selectOrderList" resultType="orderDto" parameterType="String">
        select orderNo, userId, status, createdDate
        from orders
        WHERE userId='${userId}'
    </select>
    <!-- orderNo로 주문정보 반환 -->
    <select id="selectOrder" parameterType="int" resultType="OrderDto">
        select orderNo, userId, status, createdDate
        FROM orders
        WHERE orderNo = '${orderNo}'
    </select>
    <!-- orderNo, prodcutNo로 주문상품 반환 -->
    <select id="selectOrderItem" resultType="orderItemDto" parameterType="map">
        select orderNo, productNo, productName, productCategory, productQty, productPrice
        from orderitem
        WHERE orderNo = #{orderNo}
          AND productNo = #{productNo}
    </select>
    <!-- orderNo로 주문상품 목록 반환 -->
    <select id="selectOrderItemList" resultType="orderItemDto" parameterType="int">
        select orderNo, productNo, productName, productCategory, productQty, productPrice
        from orderitem
        WHERE orderNo='${orderNo}'
    </select>
    <!-- orderNo로 배송정보 반환 -->
    <select id="selectDelivery" resultType="deliveryDto" parameterType="int">
        select orderNo, receiver, PHONE, ADDRESS1, ADDRESS2, MESSAGE
        from delivery
        WHERE orderNo = '${orderNo}'
    </select>
    <!-- orderNo로 결제정보 반환 -->
    <select id="selectPayment" resultType="paymentDto" parameterType="int">
        select orderNo, PRICE, TYPE
        from payment
        WHERE orderNo='${orderNo}'
    </select>
<select id="selectUserRecentOrderNo" resultType="int">
    select IFNULL(max(orderNo)+1,1) as orderNo
    from orders
</select>
    <insert id="insertOrder" parameterType="String">
        insert into orders (userId, status, createdDate)
        values ('${userId}', 'pending', now());
    </insert>

    <insert id="insertOrderItem" parameterType="orderItemDto">
        insert into orderitem (orderNo, productNo, productName, productCategory, productQty, productPrice)
        values ((select count(*) from orders), #{productNo}, #{productName}, #{productCategory}, #{productQty},
                #{productPrice});
    </insert>

    <insert id="insertDelivery" parameterType="deliveryDto">
        insert into delivery (orderNo, receiver, PHONE, ADDRESS1, ADDRESS2, MESSAGE)
        values ((select count(*) from orders), #{receiver}, #{phone}, #{address1}, #{address2}, #{message});
    </insert>

    <insert id="insertPayment" parameterType="paymentDto">
        insert into payment (orderNo, PRICE, TYPE)
        values ((select count(*) from orders), #{price},#{type});
    </insert>

    <update id="updateStock" parameterType="map">
        update product
        set productStock = productStock - #{productQty}
        where productNo = #{productNo};
    </update>
    <update id="updateOrderStatus" parameterType="int">
        update orders
        set status = '배송완료'
        where orderNo = '${orderNo}'
    </update>

    <delete id="deleteOrder" parameterType="int">
        delete
        from orders
        where orderNo = '${orderNo}'
    </delete>
</mapper>
