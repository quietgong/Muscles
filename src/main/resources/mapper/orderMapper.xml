<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kinaboot.muscles.dao.orderMapper">
    <select id="count" resultType="int">
        SELECT count(*)
        FROM orders
    </select>
    <select id="selectAll" resultType="orderDto">
        SELECT
            O.* as userId
            ,u.userId as userId
             ,O.createdDate AS createdDate
             ,O.STATUS AS status
             ,CONCAT((SELECT NAME
                      FROM CATEGORY
                      WHERE CATEGORY_NO=(
                          (SELECT PCATEGORY_NO
                           FROM CATEGORY
                           WHERE NAME=C.NAME)
                      )), "-" ,C.NAME) AS productCategory
             ,P.productName AS productName
             ,O.productQty AS productQty
             ,P.PRICE*O.productQty AS productPrice
        FROM ORDERS O, USER U, PRODUCT P, CATEGORY C
        WHERE O.productNo=P.productNo
          AND O.userId=U.ID
          AND C.NAME=P.categoryName
        order by createdDate
    </select>
    <select id="selectOrder" parameterType="String" resultType="OrderDto">
        SELECT O.userId      as userId
             , O.bundleNo    AS bundleNo
             , O.createdDate AS createdDate
             , O.STATUS      AS status
        FROM ORDERS O,
             USER U,
             PRODUCT P,
             CATEGORY C
        WHERE U.ID = '${userId}'
          AND O.userId = U.ID
          AND C.NAME = P.categoryName
        group by O.userId, O.bundleNo, O.createdDate, O.STATUS;
    </select>
    <select id="selectOrderAll" parameterType="String" resultType="OrderDto">
        SELECT
            O.userId as userId
             ,O.bundleNo AS bundleNo
             ,O.createdDate AS createdDate
             ,O.STATUS AS status
        FROM ORDERS O, USER U, PRODUCT P, CATEGORY C
        WHERE O.userId=U.ID
          AND C.NAME=P.categoryName
        group by O.userId, O.bundleNo, O.createdDate, O.STATUS;
    </select>
    <select id="selectOrderOne" parameterType="map" resultType="OrderDto">
        SELECT
            O.userId as userId
             ,O.bundleNo AS bundleNo
             ,O.createdDate AS createdDate
             ,O.STATUS AS status
        FROM ORDERS O, USER U, PRODUCT P, CATEGORY C
        WHERE U.ID= #{userId}
          AND O.bundleNo = #{bundleNo}
          AND O.userId=U.ID
          AND C.NAME=P.categoryName
        group by O.userId, O.bundleNo, O.createdDate, O.STATUS;
    </select>
    <!-- 전체 주문목록 가져오는 쿼리 -->
    <select id="selectOrderAllList" resultType="orderDto">
        select orderNo, userId, status, createdDate
        from orders
    </select>
    <!-- userId로 주문목록 가져오는 쿼리 -->
    <select id="selectOrderList" resultType="orderDto" parameterType="String">
        select orderNo, userId, status, createdDate
        from orders
        WHERE userId='${userId}'
    </select>
    <!-- orderNo, prodcutNo로 주문상품 가져오는 쿼리 -->
    <select id="selectOrderItem" resultType="orderItemDto" parameterType="map">
        select orderNo, productNo, productName, productCategory, productQty, productPrice
        from orderitem
        WHERE orderNo = #{orderNo}
          AND productNo = #{productNo}
    </select>
    <!-- orderNo로 주문상품 목록 가져오는 쿼리 -->
    <select id="selectOrderItemList" resultType="orderItemDto" parameterType="int">
        select orderNo, productNo, productName, productCategory, productQty, productPrice
        from orderitem
        WHERE orderNo='${orderNo}'
    </select>
    <!-- orderNo로 배송정보 가져오는 쿼리 -->
    <select id="selectDelivery" resultType="deliveryDto" parameterType="int">
        select orderNo, receiver, PHONE, ADDRESS, MESSAGE
        from delivery
        WHERE orderNo='${orderNo}'
    </select>
    <!-- orderNo로 결제정보 가져오는 쿼리 -->
    <select id="selectPayment" resultType="paymentDto" parameterType="int">
        select orderNo, PRICE, TYPE
        from payment
        WHERE orderNo='${orderNo}'
    </select>

    <insert id="insertOrder" parameterType="orderDto">
        insert into orders (userId, status, createdDate)
        values (#{userId},#{status},now());
    </insert>

    <insert id="insertOrderItem" parameterType="orderItemDto">
        insert into orderitem (orderNo, productNo, productName, productCategory, productQty, productPrice)
        values ((select count(*) from orders), #{productNo}, #{productName}, #{productCategory}, #{productQty},
                #{productPrice});
    </insert>

    <insert id="insertDelivery" parameterType="deliveryDto">
        insert into delivery (orderNo, receiver, PHONE, ADDRESS, MESSAGE)
        values ((select count(*) from orders), #{receiver},#{phone},#{address},#{message});
    </insert>

    <insert id="insertPayment" parameterType="paymentDto">
        insert into payment (orderNo, PRICE, TYPE)
        values ((select count(*) from orders), #{price},#{type});
    </insert>

    <update id="updateStock" parameterType="map">
        update product
        set productStock = productStock - #{productQty}
        where productNo = #{productNo};
    </update>
    <update id="updateOrderStatus" parameterType="int">
        update orders
        set status = '배송완료'
        where orderNo = '${orderNo}'
    </update>
</mapper>
