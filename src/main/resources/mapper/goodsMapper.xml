<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kinaboot.muscles.dao.goodsMapper">
    <select id="count" resultType="int">
        SELECT count(*)
        FROM GOODS
    </select>

    <select id="selectGoodsNo" resultType="int">
        select max(goodsNo)
        from goods
    </select>

    <select id="selectBestGoods" resultType="goodsDto">
        <include refid="goodsBasicColumns"/>
        , c.goodsReviewScore as goodsReviewScore
        from goods g,
        ((select A.goodsNo as goodsNo, A.sales * B.score as score, B.score as goodsReviewScore
        from (select goodsNo, sum(goodsQty) as sales
        from orderitem
        where orderNo in (select orderNo
        from orders
        where status = '주문완료'
        and createdDate between DATE_ADD(now(), INTERVAL -1 MONTH) and now())
        group by goodsNo) A,
        (select goodsNo, avg(score) as score
        from review
        where orderNo in (select orderNo
        from orders
        where status = '주문완료'
        and createdDate between DATE_ADD(now(), INTERVAL -1 MONTH) and now())
        group by goodsNo) B
        where A.goodsNo = B.goodsNo)) C
        where g.goodsNo = C.goodsNo
        order by C.score limit 3;
    </select>

    <select id="selectAll" resultType="goodsDto">
        <include refid="goodsBasicColumns"/>
        , IFNULL(a.score, 0) as goodsReviewScore
        , IFNULL(a.sales, 0) as goodsSales
        FROM goods g
        left outer JOIN
        (select r.goodsNo as goodsNo, r.score as score, o.goodsQty as sales
        from (select goodsNo, avg(score) as score from review group by goodsNo) r,
        (select goodsNo, sum(goodsQty) as goodsQty
        from orderitem
        where orderNo in (select orderNo from orders where status = '주문완료')
        group by goodsNo) o
        where r.goodsNo = o.goodsNo) a
        on g.goodsNo = a.goodsNo
    </select>

    <select id="select" parameterType="int" resultType="goodsDto">
        <include refid="goodsBasicColumns"/>
        , IFNULL(r.score, 0) as goodsReviewScore
        from (select *
        FROM GOODS
        where goodsNo = #{goodsNo}) g
        left outer join (select goodsNo, avg(score) as score
        from review
        group by goodsNo) r
        on g.goodsNo = r.goodsNo;
    </select>

    <select id="selectByCategoryCnt" parameterType="SearchCondition" resultType="int">
        select count(*)
        FROM GOODS
        where 1=1
        <include refid="priceCondition"/>
        <include refid="goodsCondition"/>
    </select>

    <select id="selectByCategory" parameterType="SearchCondition" resultType="goodsDto">
        <include refid="goodsBasicColumns"/>
        , IFNULL(r.score, 0) as goodsReviewScore
        from goods g,
        (select g.goodsNo, avg(r.score) score
        from goods g
        LEFT JOIN
        (select * from review where expiredDate is null) r
        ON g.goodsNo = r.goodsNo
        group by g.goodsNo) r
        where g.goodsNo = r.goodsNo
        <include refid="priceCondition"/>
        <include refid="goodsCondition"/>
        <include refid="optionCondition"/>
        LIMIT #{offset}, 9;
    </select>

    <select id="selectFaqList" parameterType="int" resultType="faqDto">
        SELECT *
        FROM faq
        where goodsNo = ${goodsNo}
        order by createdDate
    </select>

    <select id="selectAllCategories" resultType="goodsCategoryDto">
        select goodsCategory       as category
             , goodsCategoryDetail as subCategory
        from goods
        group by goodsCategory, goodsCategoryDetail;
    </select>

    <select id="selectGoodsImg" parameterType="int" resultType="goodsImgDto">
        select uploadPath, fileName
        FROM goodsImg
        where goodsNo = '${goodsNo}'
        order by goodsImgNo
    </select>

    <insert id="insert" parameterType="goodsDto">
        insert into goods
        (goodsDescription, goodsCategory, goodsCategoryDetail, goodsName, goodsPrice, goodsStock, goodsImgPath)
        values (#{goodsDescription}, #{goodsCategory}, #{goodsCategoryDetail}, #{goodsName}, #{goodsPrice},
                #{goodsStock},
                #{goodsImgPath})
    </insert>

    <insert id="insertFaqQuestion" parameterType="faqDto">
        insert into faq (userId, goodsNo, question, createdDate)
        values (#{userId}, #{goodsNo}, #{question}, now());
    </insert>

    <insert id="insertFaqAnswer" parameterType="faqDto">
        update faq
        set answer    = #{answer},
            replyDate = now()
        where faqNo = #{faqNo};
    </insert>

    <insert id="insertGoodsImg" parameterType="goodsImgDto">
        insert into goodsImg (goodsNo, uploadPath, fileName)
        values (#{goodsNo}, #{uploadPath}, #{fileName});
    </insert>

    <update id="updateGoods" parameterType="goodsDto">
        update goods
        set goodsName           = #{goodsName},
            goodsDescription    = #{goodsDescription},
            goodsPrice          = #{goodsPrice},
            goodsCategory       = #{goodsCategory},
            goodsCategoryDetail = #{goodsCategoryDetail},
            goodsStock          = #{goodsStock},
            goodsImgPath        = #{goodsImgPath}
        where goodsNo = #{goodsNo};
    </update>

    <delete id="deleteGoods" parameterType="int">
        DELETE
        FROM GOODS
        where goodsNo = '${goodsNo}'
    </delete>

    <delete id="deleteGoodsFaq" parameterType="int">
        delete
        from faq
        where goodsNo = ${goodsNo}
    </delete>

    <delete id="deleteGoodsDetail" parameterType="String">
        DELETE
        FROM goodsImg
        where uploadPath = '${imgPath}'
    </delete>

    <delete id="deleteAllGoodsDetail" parameterType="int">
        DELETE
        FROM goodsImg
        where goodsNo = '${goodsNo}'
    </delete>

    <delete id="deleteAll">
        DELETE
        FROM GOODS
    </delete>

    <sql id="goodsBasicColumns">
        select g.goodsNo             as goodsNo
             , g.goodsCategory       as goodsCategory
             , g.goodsCategoryDetail as goodsCategoryDetail
             , g.goodsDescription    as goodsDescription
             , g.goodsName           as goodsName
             , g.goodsPrice          as goodsPrice
             , g.goodsStock          as goodsStock
             , g.goodsImgPath        as goodsImgPath
    </sql>
    <sql id="priceCondition">
        <choose>
            <when test='minPrice == "" and maxPrice == ""'>
                and 1=1
            </when>
            <when test='minPrice==""'>
                <![CDATA[and goodsPrice <= #{maxPrice}]]>
            </when>
            <when test='maxPrice==""'>
                <![CDATA[and goodsPrice >= #{minPrice}]]>
            </when>
            <otherwise>
                <![CDATA[and goodsPrice >= #{minPrice}]]>
                <![CDATA[and goodsPrice <= #{maxPrice}]]>
            </otherwise>
        </choose>
    </sql>
    <sql id="goodsCondition">
        <if test="keyword!=''">
            and goodsName like concat('%',#{keyword},'%')
        </if>
        <if test="category!=''">
            and goodsCategory = #{category}
        </if>
        <if test="subCategory!=''">
            and goodsCategoryDetail = #{subCategory}
        </if>
    </sql>
    <sql id="optionCondition">
        <choose>
            <when test='option=="lowPrice"'>
                order by goodsPrice asc
            </when>
            <when test='option=="highPrice"'>
                order by goodsPrice desc
            </when>
            <when test='option=="review"'>
                order by score desc
            </when>
        </choose>
    </sql>
</mapper>
